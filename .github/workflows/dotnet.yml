name: Performance Benchmark

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  benchmark:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository with full history
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache hyperfine
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-hyperfine
          restore-keys: |
            ${{ runner.os }}-hyperfine-

      - name: Install hyperfine (if not cached)
        run: |
          if [ ! -f ~/.cargo/bin/hyperfine ]; then
            cargo install hyperfine
          fi

      # Detect changed projects
      - name: Get changed projects
        id: detect-changes
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} HEAD)
          CHANGED_PROJECTS=$(echo "$CHANGED_FILES" | grep -E '^20[0-9]{2}/[0-9]+/' | cut -d'/' -f1,2 | uniq)
          echo "changed_projects=$CHANGED_PROJECTS" >> $GITHUB_OUTPUT

      # Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0

      # Run benchmarks
      - name: Run performance benchmark
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        if: steps.detect-changes.outputs.changed_projects != ''
        run: |
          for PROJECT in ${{ steps.detect-changes.outputs.changed_projects }}; do
            echo "Benchmarking $PROJECT"
            dotnet restore "$PROJECT"
            dotnet build --configuration Release "$PROJECT"
            
            # Find the output executable
            EXE_PATH=$(find "$PROJECT/bin/Release/net9.0/" -type f -executable | head -n 1)
            if [ -z "$EXE_PATH" ]; then
              echo "No executable found for project: $PROJECT"
              continue
            fi
                        
            # Run benchmark with hyperfine
            hyperfine "$EXE_PATH" --warmup 10 --export-markdown "$PROJECT/benchmark_results.md"
          done

      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -f "$PROJECT/benchmark_results.md" ]; then
            CONTENT=$(cat "$PROJECT/benchmark_results.md")
            echo "$CONTENT"
            ESCAPED_CONTENT=$(echo "$CONTENT" | jq -R .)
            curl -H "Content-Type: application/json" \
              -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -d "{\"content\": $ESCAPED_CONTENT}" \
          fi
